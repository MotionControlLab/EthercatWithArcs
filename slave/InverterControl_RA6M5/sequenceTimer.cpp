/********************************************************************/
/* Description: AGTを用いたインターバルタイマの設定                    */
/* File: sequenceTimer.cpp                                          */
/* Date: 2024/08/18                                                 */
/* Author: Takashi YOSHIOKA                                         */
/********************************************************************/


/********************************************************************/
/* ヘッダファイルのインクルード                                        */
/********************************************************************/
#include <IRQManager.h>
#include "sequenceTimer.h"
#include "controlFunction.h"


/********************************************************************/
/* ソース内グローバルクラスの定義                                      */
/********************************************************************/
static GenericIrqCfg_t cfg;


/********************************************************************/
/* ソース内関数のプロトタイプ宣言                                      */
/********************************************************************/
static void MYISR_AGT1_INT(void);


/********************************************************************/
/* シーケンススキャン割り込み関数の外部宣言                             */
/********************************************************************/
extern void sequence_scan(void);


/********************************************************************/
/* Description: AGTの初期化                                          */
/* Function: setup_sequence_scan                                    */
/* Arguments: なし                                                  */
/* Return value: なし                                               */
/********************************************************************/
void setup_sequence_scan(void)
{
  // モジュールストップ解除
  R_MSTP->MSTPCRD_b.MSTPD2 = 0;     // AGT1

  // AGTの設定
  R_AGT1->AGTCR_b.TSTART = 0;       // カウントストップ

  R_AGT1->AGTMR1_b.TMOD = 0b000;    // 0b000:タイマモード
  R_AGT1->AGTMR1_b.TCK = 0b001;     // 0b001:AGT clock = PCKB/8 = 6.25MHz
  R_AGT1->AGTMR2_b.LPM = 0;         // 0:通常モード
  R_AGT1->AGT = PERIOD_SEQ_SET;
  
  // 割り込み設定
  cfg.irq = FSP_INVALID_VECTOR;     // 良く分からんが固定値
  cfg.ipl = 5;                      // 割り込み優先度 0(最高)-15(最低)
  cfg.event = ELC_EVENT_AGT1_INT;   // 割り込み要因としてAGT1アンダーフロー割り込みを指定
  IRQManager::getInstance().addGenericInterrupt(cfg, MYISR_AGT1_INT);   // 割り込み要因のセット
  
  R_AGT1->AGTCR_b.TSTART = 1;       // カウントスタート
}


/********************************************************************/
/* Description: 割り込みサービスルーチン(AGT1アンダーフロー割り込み)    */
/* Function: MYISR_AGT1_INT                                         */
/* Arguments: なし                                                  */
/* Return value: なし                                               */
/********************************************************************/
void MYISR_AGT1_INT(void)
{
  sequence_scan();                  // シーケンススキャン割り込み処理
  R_ICU->IELSR_b[cfg.irq].IR = 0;   // 割り込み要因フラグのクリア
}